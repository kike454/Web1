#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-test:server');
var http = require('http');
var socketIO = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3400');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
//socket
var io = socketIO(server);


const users = {}; // Almacena los usuarios y sus socket IDs
const rooms = { public: [], private: {} }; // Estructura para salas públicas y privadas

io.on('connection', (socket) => {
    console.log('Usuario conectado.');

    // Registrar el usuario
    socket.on('register user', (username) => {
        if (username) {
            users[username] = socket.id;
            socket.username = username; // Asociar nombre al socket
            console.log(`${username} se ha conectado con ID: ${socket.id}`);
        }
    });

    // Crear una sala pública
    socket.on('create public room', (roomName) => {
        if (!rooms.public.includes(roomName)) {
            rooms.public.push(roomName);
            console.log(`Sala pública creada: ${roomName}`);
            io.emit('room list', rooms.public); // Emitir lista de salas públicas
        }
    });

    // Crear una sala privada
    socket.on('create private room', ({ roomName, password }) => {
        if (!rooms.private[roomName]) {
            rooms.private[roomName] = { password, users: [] };
            console.log(`Sala privada creada: ${roomName}`);
        }
    });

    // Unirse a una sala
    socket.on('join room', ({ roomName, password }) => {
        if (rooms.public.includes(roomName)) {
            // Sala pública
            socket.join(roomName);
            socket.currentRoom = roomName;
            console.log(`${socket.username} se unió a la sala pública ${roomName}`);
            io.to(roomName).emit('room message', {
                username: 'Sistema',
                message: `${socket.username} se ha unido a la sala.`,
            });
        } else if (rooms.private[roomName]) {
            // Sala privada
            if (rooms.private[roomName].password === password) {
                socket.join(roomName);
                socket.currentRoom = roomName;
                rooms.private[roomName].users.push(socket.username);
                console.log(`${socket.username} se unió a la sala privada ${roomName}`);
                io.to(roomName).emit('room message', {
                    username: 'Sistema',
                    message: `${socket.username} se ha unido a la sala.`,
                });
            } else {
                socket.emit('room error', 'Contraseña incorrecta.');
            }
        } else {
            socket.emit('room error', 'La sala no existe.');
        }
    });

    // Enviar mensaje a una sala
    socket.on('room message', (message) => {
        const room = socket.currentRoom;
        if (room) {
            io.to(room).emit('room message', {
                username: socket.username,
                message: message,
            });
        }
    });

    // Desconexión del usuario
    socket.on('disconnect', () => {
        console.log(`${socket.username} se ha desconectado.`);
    });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
